{
  "scenario": {
    "name": "Pyramid Tournament - Cellular Automata",
    "version": "1.0", 
    "description": "Multiple developers compete in a tournament structure, with the senior developer creating the final implementation"
  },
  
  "agentTemplates": {
    "speedDev": {
      "model": "gemma3:4b",
      "temperature": 0.9,
      "systemPrompt": "You are a junior developer who prioritizes speed and rapid prototyping. You believe in 'ship fast, iterate later'. You love using the latest libraries and aren't afraid to try experimental approaches. Keep your code concise.",
      "defaultContext": "clean"
    },
    "visualDev": {
      "model": "gemma3:4b",
      "temperature": 0.8,
      "systemPrompt": "You are a junior developer obsessed with beautiful visualizations. You believe the user experience is everything. You'll add extra visual features even if they slow things down. You love colors, animations, and smooth transitions.",
      "defaultContext": "clean"
    },
    "mathDev": {
      "model": "gemma3:4b",
      "temperature": 0.6,
      "systemPrompt": "You are a junior developer with a mathematics background. You focus on the underlying algorithms and mathematical elegance. You enjoy implementing complex rules and patterns. Performance matters, but correctness matters more.",
      "defaultContext": "clean"
    },
    "hackDev": {
      "model": "gemma3:4b",
      "temperature": 0.85,
      "systemPrompt": "You are a junior developer who loves clever hacks and unconventional solutions. You think outside the box and aren't afraid to bend the rules. You prioritize getting interesting results over following best practices.",
      "defaultContext": "clean"
    },
    "judge": {
      "model": "gemma3:4b",
      "temperature": 0.4,
      "systemPrompt": "You are a mid-level developer judging code competitions. Evaluate implementations based on: functionality, visual appeal, code quality, performance, and innovation. Pick a clear winner and explain why.",
      "defaultContext": "clean"
    },
    "seniorDev": {
      "model": "gemma3:4b",
      "temperature": 0.5,
      "systemPrompt": "You are a senior developer who has seen it all. You can take any implementation and improve it by combining the best aspects while fixing the weaknesses. You write production-ready code with proper error handling and documentation.",
      "defaultContext": "rolling"
    },
    "architect": {
      "model": "gemma3:4b",
      "temperature": 0.3,
      "systemPrompt": "You are a software architect doing final technical reviews. Evaluate code for production readiness, scalability, maintainability, and architectural soundness. Provide high-level feedback and approval decisions.",
      "defaultContext": "clean"
    }
  },
  
  "actionTemplates": {
    "createCA": {
      "promptTemplate": "Create a Python cellular automata simulation:\n\n1. Use matplotlib for visualization\n2. Use numpy for performance\n3. Must run indefinitely (only stop on extinction)\n4. Show emergent behavior\n5. Real-time smooth animation\n6. Include your unique twist based on your coding style\n\nFocus on: {{focus}}\n\nProvide complete, runnable code."
    },
    "compareTwo": {
      "promptTemplate": "Compare these two cellular automata implementations:\n\n=== {{name1}}'s CODE ===\n{{code1}}\n\n=== {{name2}}'s CODE ===\n{{code2}}\n\nEvaluate based on:\n1. Does it meet all requirements?\n2. Visual appeal and user experience\n3. Code quality and clarity\n4. Performance\n5. Innovation and creativity\n\nPick a clear winner. Be decisive."
    },
    "analyzeWinner": {
      "promptTemplate": "You've selected {{winner}} as the winner. Now analyze their code in detail:\n\n{{code}}\n\nProvide:\n1. What makes this implementation stand out\n2. Its key strengths\n3. Areas that could be improved\n4. Specific technical insights"
    },
    "improveImplementation": {
      "promptTemplate": "You've reviewed multiple cellular automata implementations and seen what works. Now create your own superior version.\n\nTake the best ideas from what you've seen, especially from:\n{{winnerCode}}\n\nRequirements:\n1. Implement all the standard requirements\n2. Add proper error handling\n3. Include docstrings and comments\n4. Optimize for both performance and visual appeal\n5. Add at least one innovative feature\n\nCreate production-ready code that combines the best of all approaches."
    },
    "finalReview": {
      "promptTemplate": "Perform an architectural review of this cellular automata implementation:\n\n{{code}}\n\nEvaluate:\n1. Production readiness\n2. Code architecture and design patterns\n3. Performance characteristics\n4. Maintainability and extensibility\n5. Security considerations\n6. Overall quality\n\nProvide a GO/NO-GO decision with detailed justification."
    }
  },
  
  "execution": [
    {
      "action": "createAgent",
      "params": {"template": "speedDev", "instanceName": "speed"}
    },
    {
      "action": "createAgent",
      "params": {"template": "visualDev", "instanceName": "visual"}
    },
    {
      "action": "createAgent",
      "params": {"template": "mathDev", "instanceName": "math"}
    },
    {
      "action": "createAgent",
      "params": {"template": "hackDev", "instanceName": "hack"}
    },
    {
      "action": "createAgent",
      "params": {"template": "judge", "instanceName": "judge"}
    },
    {
      "action": "createAgent",
      "params": {"template": "seniorDev", "instanceName": "senior"}
    },
    {
      "action": "createAgent",
      "params": {"template": "architect", "instanceName": "architect"}
    },
    
    {
      "id": "initial_implementations",
      "action": "createCA",
      "agent": "speed",
      "params": {"focus": "rapid development and quick results"},
      "output": "speed_impl"
    },
    {
      "action": "createCA",
      "agent": "visual",
      "params": {"focus": "stunning visuals and smooth animations"},
      "output": "visual_impl"
    },
    {
      "action": "createCA",
      "agent": "math",
      "params": {"focus": "mathematical patterns and algorithmic beauty"},
      "output": "math_impl"
    },
    {
      "action": "createCA",
      "agent": "hack",
      "params": {"focus": "unconventional rules and surprising behaviors"},
      "output": "hack_impl"
    },
    
    {
      "id": "round1_match1",
      "action": "compareTwo",
      "agent": "judge",
      "params": {
        "name1": "SpeedDev",
        "code1": "{{outputs.speed_impl}}",
        "name2": "VisualDev",
        "code2": "{{outputs.visual_impl}}"
      },
      "output": "round1_result1"
    },
    {
      "action": "analyzeWinner",
      "agent": "judge",
      "params": {
        "winner": "the developer you chose",
        "code": "{{outputs.speed_impl}} OR {{outputs.visual_impl}}"
      },
      "output": "round1_analysis1"
    },
    {
      "action": "clearContext",
      "agent": "judge"
    },
    
    {
      "id": "round1_match2", 
      "action": "compareTwo",
      "agent": "judge",
      "params": {
        "name1": "MathDev",
        "code1": "{{outputs.math_impl}}",
        "name2": "HackDev",
        "code2": "{{outputs.hack_impl}}"
      },
      "output": "round1_result2"
    },
    {
      "action": "analyzeWinner",
      "agent": "judge",
      "params": {
        "winner": "the developer you chose",
        "code": "{{outputs.math_impl}} OR {{outputs.hack_impl}}"
      },
      "output": "round1_analysis2"
    },
    {
      "action": "clearContext",
      "agent": "judge"
    },
    
    {
      "id": "finals",
      "action": "compareTwo",
      "agent": "judge",
      "params": {
        "name1": "Round1 Winner #1",
        "code1": "{{outputs.speed_impl}} OR {{outputs.visual_impl}}",
        "name2": "Round1 Winner #2", 
        "code2": "{{outputs.math_impl}} OR {{outputs.hack_impl}}"
      },
      "output": "final_winner"
    },
    {
      "action": "analyzeWinner",
      "agent": "judge",
      "params": {
        "winner": "the final champion",
        "code": "THE WINNING CODE FROM ABOVE"
      },
      "output": "final_analysis"
    },
    
    {
      "id": "senior_implementation",
      "action": "improveImplementation",
      "agent": "senior",
      "params": {
        "winnerCode": "{{lastOutput('judge')}}"
      },
      "output": "senior_impl"
    },
    
    {
      "id": "architect_review",
      "action": "finalReview",
      "agent": "architect",
      "params": {
        "code": "{{outputs.senior_impl}}"
      },
      "output": "architect_decision"
    },
    
    {
      "action": "saveToFile",
      "params": {
        "content": "# Cellular Automata - Production Version\n# Developed through pyramid tournament process\n\n{{outputs.senior_impl}}",
        "filename": "cellular_automata_production.py"
      }
    },
    {
      "action": "saveToFile",
      "params": {
        "content": "# Tournament Results\n\n## Initial Implementations\n\n### Speed Developer\nFocused on rapid prototyping\n\n### Visual Developer  \nFocused on beautiful animations\n\n### Math Developer\nFocused on algorithmic patterns\n\n### Hack Developer\nFocused on unconventional approaches\n\n## Round 1 Results\n\n### Match 1: Speed vs Visual\n{{outputs.round1_result1}}\n\n{{outputs.round1_analysis1}}\n\n### Match 2: Math vs Hack\n{{outputs.round1_result2}}\n\n{{outputs.round1_analysis2}}\n\n## Finals\n{{outputs.final_winner}}\n\n{{outputs.final_analysis}}\n\n## Senior Developer Implementation\nThe senior developer took the winning approach and created a production-ready version.\n\n## Architect's Final Review\n{{outputs.architect_decision}}",
        "filename": "tournament_summary.md"
      }
    }
  ],
  
  "config": {
    "logLevel": "info",
    "saveIntermediateOutputs": true,
    "outputDirectory": "./pyramid_tournament_results",
    "queryTimeout": 300,
    "maxContextTokens": 10000
  }
}