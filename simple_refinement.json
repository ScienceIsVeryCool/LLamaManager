{
  "metadata": {
    "name": "Simplified Iterative Development",
    "version": "1.0",
    "description": "One developer creates a solution, which is then tested and reviewed, with concise feedback provided for refinement."
  },
  "agents": {
    "developer": {
      "model": "gemma3:12b",
      "temperature": 0.6,
      "personality": "You are a junior Python developer who values clean, efficient code. You prefer well-tested libraries and established patterns. You write Python code with a focus on performance and maintainability. You believe in 'keep it simple, stupid' and optimize for clarity and speed. You're skeptical of unnecessary features.",
      "contextType": "rolling"
    },
    "reviewer": {
      "model": "gemma3:12b",
      "temperature": 0.3,
      "personality": "You are a Senior Python Engineer evaluating competing implementations. You value both creativity and practicality. Be direct about strengths and weaknesses. Consider performance, visual appeal, code quality, and how well the solution meets requirements. Provide balanced feedback to both developers.",
      "contextType": "rolling"
    },
    "bossman": {
      "model": "gemma3:12b",
      "temperature": 0.3,
      "personality": "You are The Boss Man. You have the vision where others don't. You always push for just outside the realm of possible.",
      "contextType": "rolling"
    }
  },
  "actions": {
    "draftRequirements": {
      "prompt": "Write some thoughtful requirements a developer would need in order to complete a Python script for a cool and innovative cellular automata simulation with real-time visualization. Do not simply re-create Conway's Game Of Life."
    },
    "initialSolution": {
      "prompt": "Write a complete Python script for a cool and innovative cellular automata simulation with real-time visualization based on these requirements: \n\n{{1}}\n\n. Provide the full runnable code. Use print statements for logging as your code will be tested every time"
    },
    "analyzeExecutionAndSuggest": {
      "prompt": "Analyze this execution log:\n\n{{1}}\n\nProvide a summary of the log, including any errors or unexpected behavior. Then, summarize how to fix any identified errors and/or suggest features to add to the code for improvement.\n Here is the code for reference:\n\n{{2}}\n\n and here were the original requirements: \n\n{{3}}"
    },
    "provideShortFeedback": {
      "prompt": "Based on what you saw, what are the most critical points for you to address in your next iteration? Keep your response a bit short. Make sure takeaways are actionable for the developer."
    },
    "incorporateFeedback": {
      "prompt": "Here's your feedback for improving the cellular automata simulation:\n\n{{1}}\n\nRefine your previous cellular automata simulation based on this feedback. Provide the complete improved implementation, ensuring it's runnable."
    }
  },
  "workflow": [
        {
      "action": "draftRequirements",
      "agent": "bossman",
      "inputs": [],
      "output": "requirements.md"
    },
    {
      "action": "initialSolution",
      "agent": "developer",
      "inputs": ["requirements.md"],
      "output": "solution.py",
      "format": "python"
    },
    {
      "action": "run_python",
      "inputs": ["solution.py"],
      "output": "execution.log"
    },
    {
      "action": "loop",
      "iterations": 3,
      "steps": 
      [
        {
          "action": "analyzeExecutionAndSuggest",
          "agent": "reviewer",
          "inputs": ["execution.log", "solution.py", "requirements.md"]
        },
        {
          "action": "provideShortFeedback",
          "agent": "reviewer",
          "output": "code_review.md"
        },
        {
          "action": "incorporateFeedback",
          "agent": "developer",
          "inputs": ["code_review.md"],
          "output": "solution.py",
          "format": "python"
        },
        {
          "action": "run_python",
          "inputs": ["solution.py"],
          "output": "execution.log"
        },
        {
          "action": "clearContext",
          "agent": "reviewer"
        }
      ]
    }
  ],
  "config": {
    "logLevel": "info",
    "outputDirectory": "./simplified_scenario_output",
    "queryTimeout": 300,
    "maxContextTokens": 32000
  }
}