{
  "scenario": {
    "name": "Advanced Cellular Automata Development",
    "version": "2.0",
    "description": "Comprehensive multi-agent development of a creative cellular automata simulation with emergent behaviors, optimized for minimal code and maximum visual impact"
  },
  
  "agentTemplates": {
    "juniorDev": {
      "model": "gemma3:12b",
      "temperature": 0.7,
      "systemPrompt": "You are a Junior Software Engineer who writes clean, simple Python code. Focus on creating working solutions using libraries where appropriate. Be eager to learn and implement feedback.",
      "defaultContext": "rolling"
    },
    "seniorReviewer": {
      "model": "gemma3:12b",
      "temperature": 0.3,
      "systemPrompt": "You are a Senior Engineer who provides blunt, actionable feedback. Be concise and direct. Focus on critical issues only. Don't hesitate to suggest starting over if the approach is fundamentally flawed."
    },
    "productManager": {
      "model": "gemma3:12b",
      "temperature": 0.8,
      "systemPrompt": "You are a Product Manager who defines requirements and user stories. Focus on business value, user needs, and clear acceptance criteria. Ask clarifying questions about edge cases and prioritize features.",
      "defaultContext": "rolling"
    },
    "techLead": {
      "model": "gemma3:12b",
      "temperature": 0.4,
      "systemPrompt": "You are a Technical Lead who designs system architecture and makes technology decisions. Consider scalability, maintainability, and technical debt. Provide high-level guidance and architectural patterns.",
      "defaultContext": "rolling"
    },
    "performanceEngineer": {
      "model": "gemma3:12b",
      "temperature": 0.4,
      "systemPrompt": "You are a Performance Engineer who optimizes system performance and identifies bottlenecks. Focus on profiling, monitoring, caching strategies, and algorithmic improvements. Suggest specific optimizations.",
      "defaultContext": "rolling"
    },
    "uxDesigner": {
      "model": "gemma3:12b",
      "temperature": 0.9,
      "systemPrompt": "You are a UX Designer who focuses on user experience and interface design. Consider usability, accessibility, and user workflows. Provide creative suggestions for visualizations and interactions.",
      "defaultContext": "rolling"
    },
    "qaEngineer": {
      "model": "gemma3:12b",
      "temperature": 0.5,
      "systemPrompt": "You are a QA Engineer focused on test strategy and quality assurance. Design comprehensive test cases, identify edge cases, and suggest testing approaches. Be methodical and thorough.",
      "defaultContext": "rolling"
    },
    "creativeCoder": {
      "model": "gemma3:12b",
      "temperature": 0.9,
      "systemPrompt": "You are a Creative Coder who specializes in generative art and complex systems. Push boundaries with innovative algorithms, unexpected behaviors, and artistic visualizations. Think outside the box.",
      "defaultContext": "rolling"
    },
    "dataEngineer": {
      "model": "gemma3:12b",
      "temperature": 0.4,
      "systemPrompt": "You are a Data Engineer who designs data pipelines and storage solutions. Focus on efficient data structures, memory optimization, and scalable data handling for simulations.",
      "defaultContext": "rolling"
    }
  },

  "actionTemplates": {
    "defineRequirements": {
      "type": "prompt",
      "promptTemplate": "Define comprehensive requirements for a cellular automata simulation that demonstrates emergence and adaptation. Consider:\n- Core functionality needed\n- Visual requirements\n- Performance constraints\n- User interaction needs\n- Success criteria\n\nMake it creative but achievable with minimal code using Python libraries.",
      "outputCapture": "full"
    },
    "designArchitecture": {
      "type": "prompt",
      "promptTemplate": "Based on these requirements:\n{{requirements}}\n\nDesign a technical architecture for the cellular automata simulation. Focus on:\n- Library selection (numpy, matplotlib, pygame, etc.)\n- Code structure and modularity\n- Data flow and algorithms\n- Extensibility for different CA rules\n\nKeep it simple but powerful.",
      "inputRequired": ["requirements"],
      "outputCapture": "full"
    },
    "designVisualInterface": {
      "type": "prompt",
      "promptTemplate": "Given these requirements:\n{{requirements}}\n\nAnd this architecture:\n{{architecture}}\n\nDesign the visual interface and user experience. Consider:\n- Color schemes and visual aesthetics\n- Animation and frame rates\n- Interactive controls\n- Information display\n- Accessibility\n\nFocus on creating compelling, emergent visual patterns.",
      "inputRequired": ["requirements", "architecture"],
      "outputCapture": "full"
    },
    "implementSolution": {
      "type": "prompt",
      "promptTemplate": "Implement a complete Python solution for cellular automata based on:\n\nRequirements: {{requirements}}\nArchitecture: {{architecture}}\nUI Design: {{uiDesign}}\n\nCreate working code that:\n- Uses appropriate libraries efficiently\n- Implements multiple CA rules (Conway's Life, custom rules)\n- Has real-time visualization\n- Shows emergent behaviors\n- Keeps code minimal but effective\n\nProvide complete, runnable code.",
      "inputRequired": ["requirements", "architecture", "uiDesign"],
      "outputCapture": "full"
    },
    "reviewCode": {
      "type": "prompt",
      "promptTemplate": "Review this cellular automata code critically:\n\n{{code}}\n\nFocus on:\n- Correctness and bugs\n- Algorithm efficiency\n- Code structure and readability\n- Library usage optimization\n- Missing features from requirements\n\nBe direct about what needs improvement.",
      "inputRequired": ["code"],
      "outputCapture": "full"
    },
    "reviewPerformance": {
      "type": "prompt",
      "promptTemplate": "Analyze this cellular automata code for performance:\n\n{{code}}\n\nFocus on:\n- Computational bottlenecks\n- Memory usage optimization\n- Algorithmic improvements\n- Library efficiency\n- Scaling considerations\n\nProvide specific optimization suggestions.",
      "inputRequired": ["code"],
      "outputCapture": "full"
    },
    "reviewCreativity": {
      "type": "prompt",
      "promptTemplate": "Evaluate this cellular automata code for creativity and emergence:\n\n{{code}}\n\nConsider:\n- Visual appeal and artistic merit\n- Complexity of emergent behaviors\n- Innovation in CA rules\n- Unexpected patterns or interactions\n- Creative use of libraries\n\nSuggest enhancements for more compelling emergence.",
      "inputRequired": ["code"],
      "outputCapture": "full"
    },
    "reviewQuality": {
      "type": "prompt",
      "promptTemplate": "Perform quality assurance on this cellular automata code:\n\n{{code}}\n\nTest for:\n- Edge cases and boundary conditions\n- Input validation\n- Error handling\n- Code reliability\n- User experience issues\n\nProvide testing strategy and improvement recommendations.",
      "inputRequired": ["code"],
      "outputCapture": "full"
    },
    "reviseCode": {
      "type": "prompt",
      "promptTemplate": "Revise this cellular automata code based on feedback:\n\nOriginal Code:\n{{code}}\n\nFeedback to Address:\n{{feedback}}\n\nCreate an improved version that addresses ALL issues while maintaining the core functionality. Provide complete revised code.",
      "inputRequired": ["code", "feedback"],
      "outputCapture": "full"
    },
    "optimizePerformance": {
      "type": "prompt",
      "promptTemplate": "Optimize this cellular automata code for performance:\n\n{{code}}\n\nBased on this analysis:\n{{analysis}}\n\nFocus on:\n- Vectorization with numpy\n- Memory efficiency\n- Algorithm optimization\n- Rendering performance\n\nProvide optimized code with explanations.",
      "inputRequired": ["code", "analysis"],
      "outputCapture": "full"
    },
    "enhanceCreativity": {
      "type": "prompt",
      "promptTemplate": "Enhance the creativity and emergence of this cellular automata:\n\n{{code}}\n\nBased on this creative review:\n{{review}}\n\nAdd:\n- More interesting CA rules\n- Dynamic parameters\n- Color evolution\n- Interactive elements\n- Unexpected behaviors\n\nPush the boundaries while keeping code concise.",
      "inputRequired": ["code", "review"],
      "outputCapture": "full"
    },
    "addDocumentation": {
      "type": "prompt",
      "promptTemplate": "Create comprehensive documentation for this cellular automata simulation:\n\n{{code}}\n\nInclude:\n- Setup and installation instructions\n- Usage examples\n- CA rules explanation\n- Customization guide\n- Performance tips\n- Troubleshooting\n\nMake it beginner-friendly but thorough.",
      "inputRequired": ["code"],
      "outputCapture": "full"
    }
  },
  
  "execution": [
    {
      "id": "init_pm",
      "action": "createAgent",
      "params": {
        "template": "productManager",
        "instanceName": "pm1"
      }
    },
    {
      "id": "init_ux",
      "action": "createAgent",
      "params": {
        "template": "uxDesigner",
        "instanceName": "ux1"
      }
    },
    {
      "id": "init_lead",
      "action": "createAgent",
      "params": {
        "template": "techLead",
        "instanceName": "lead1"
      }
    },
    {
      "id": "init_dev",
      "action": "createAgent",
      "params": {
        "template": "juniorDev",
        "instanceName": "dev1"
      }
    },
    {
      "id": "init_senior",
      "action": "createAgent",
      "params": {
        "template": "seniorReviewer",
        "instanceName": "senior1"
      }
    },
    {
      "id": "init_perf",
      "action": "createAgent",
      "params": {
        "template": "performanceEngineer",
        "instanceName": "perf1"
      }
    },
    {
      "id": "init_creative",
      "action": "createAgent",
      "params": {
        "template": "creativeCoder",
        "instanceName": "creative1"
      }
    },
    {
      "id": "init_qa",
      "action": "createAgent",
      "params": {
        "template": "qaEngineer",
        "instanceName": "qa1"
      }
    },
    {
      "id": "init_data",
      "action": "createAgent",
      "params": {
        "template": "dataEngineer",
        "instanceName": "data1"
      }
    },
    
    {
      "id": "phase1_requirements",
      "action": "defineRequirements",
      "agent": "pm1",
      "output": "requirements"
    },
    {
      "id": "phase1_architecture", 
      "action": "designArchitecture",
      "agent": "lead1",
      "params": {
        "requirements": "{{outputs.requirements}}"
      },
      "output": "architecture"
    },
    {
      "id": "phase1_ui_design",
      "action": "designVisualInterface", 
      "agent": "ux1",
      "params": {
        "requirements": "{{outputs.requirements}}",
        "architecture": "{{outputs.architecture}}"
      },
      "output": "uiDesign"
    },
    
    {
      "id": "phase2_initial_implementation",
      "action": "implementSolution",
      "agent": "dev1", 
      "params": {
        "requirements": "{{outputs.requirements}}",
        "architecture": "{{outputs.architecture}}",
        "uiDesign": "{{outputs.uiDesign}}"
      },
      "output": "initialCode"
    },
    
    {
      "id": "senior_review_1",
      "action": "reviewCode",
      "agent": "senior1",
      "params": {"code": "{{outputs.initialCode}}"},
      "output": "seniorFeedback1"
    },
    {
      "id": "performance_review_1", 
      "action": "reviewPerformance",
      "agent": "perf1",
      "params": {"code": "{{outputs.initialCode}}"},
      "output": "perfFeedback1"
    },
    {
      "id": "creative_review_1",
      "action": "reviewCreativity", 
      "agent": "creative1",
      "params": {"code": "{{outputs.initialCode}}"},
      "output": "creativeFeedback1"
    },
    
    {
      "id": "first_major_revision",
      "action": "reviseCode",
      "agent": "dev1",
      "params": {
        "code": "{{outputs.initialCode}}",
        "feedback": "{{outputs.seniorFeedback1}}"
      },
      "output": "revision1"
    },
    
    {
      "id": "iteration_cycle_1",
      "action": "loop",
      "iterations": 15,
      "steps": [
        {
          "id": "revise_{{iteration}}",
          "action": "reviseCode",
          "agent": "dev1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "feedback": "{{lastOutput('senior1')}}"
          },
          "output": "revision1_{{iteration}}"
        },
        {
          "id": "review_{{iteration}}",
          "action": "reviewCode",
          "agent": "senior1", 
          "params": {"code": "{{lastOutput('dev1')}}"},
          "output": "review1_{{iteration}}"
        }
      ]
    },
    
    {
      "id": "qa_review_2",
      "action": "reviewQuality",
      "agent": "qa1",
      "params": {"code": "{{lastOutput('dev1')}}"},
      "output": "qaFeedback2"
    },
    {
      "id": "data_review_2",
      "action": "reviewCode", 
      "agent": "data1",
      "params": {"code": "{{lastOutput('dev1')}}"},
      "output": "dataFeedback2"
    },
    {
      "id": "creative_review_2",
      "action": "reviewCreativity",
      "agent": "creative1", 
      "params": {"code": "{{lastOutput('dev1')}}"},
      "output": "creativeFeedback2"
    },
    
    {
      "id": "iteration_cycle_2",
      "action": "loop", 
      "iterations": 10,
      "steps": [
        {
          "id": "revise2_{{iteration}}",
          "action": "reviseCode",
          "agent": "dev1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "feedback": "{{lastOutput('qa1')}}"
          },
          "output": "revision2_{{iteration}}"
        },
        {
          "id": "creative_enhance_{{iteration}}",
          "action": "enhanceCreativity",
          "agent": "creative1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "review": "{{outputs.creativeFeedback2}}"
          },
          "output": "creative_enhancement_{{iteration}}"
        },
        {
          "id": "integrate_creative_{{iteration}}",
          "action": "reviseCode",
          "agent": "dev1", 
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "feedback": "{{lastOutput('creative1')}}"
          },
          "output": "integrated_{{iteration}}"
        }
      ]
    },
    
    {
      "id": "performance_optimization",
      "action": "loop",
      "iterations": 8,
      "steps": [
        {
          "id": "perf_analysis_{{iteration}}",
          "action": "reviewPerformance",
          "agent": "perf1",
          "params": {"code": "{{lastOutput('dev1')}}"},
          "output": "perfAnalysis_{{iteration}}"
        },
        {
          "id": "perf_optimize_{{iteration}}",
          "action": "optimizePerformance", 
          "agent": "perf1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "analysis": "{{lastOutput('perf1')}}"
          },
          "output": "perfOptimized_{{iteration}}"
        },
        {
          "id": "integrate_perf_{{iteration}}",
          "action": "reviseCode",
          "agent": "dev1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "feedback": "{{lastOutput('perf1')}}"
          },
          "output": "perfIntegrated_{{iteration}}"
        }
      ]
    },
    
    {
      "id": "creative_enhancement",
      "action": "loop",
      "iterations": 8,
      "steps": [
        {
          "id": "creative_push_{{iteration}}",
          "action": "reviewCreativity",
          "agent": "creative1", 
          "params": {"code": "{{lastOutput('dev1')}}"},
          "output": "creativePush_{{iteration}}"
        },
        {
          "id": "creative_implement_{{iteration}}",
          "action": "enhanceCreativity",
          "agent": "creative1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "review": "{{lastOutput('creative1')}}"
          },
          "output": "creativeImplement_{{iteration}}"
        },
        {
          "id": "dev_integrate_creative_{{iteration}}",
          "action": "reviseCode", 
          "agent": "dev1",
          "params": {
            "code": "{{lastOutput('dev1')}}",
            "feedback": "{{lastOutput('creative1')}}"
          },
          "output": "devCreativeIntegrate_{{iteration}}"
        }
      ]
    },
    
    {
      "id": "final_senior_review",
      "action": "reviewCode",
      "agent": "senior1",
      "params": {"code": "{{lastOutput('dev1')}}"},
      "output": "finalSeniorReview"
    },
    {
      "id": "final_qa_review", 
      "action": "reviewQuality",
      "agent": "qa1",
      "params": {"code": "{{lastOutput('dev1')}}"},
      "output": "finalQaReview"
    },
    {
      "id": "final_perf_review",
      "action": "reviewPerformance",
      "agent": "perf1", 
      "params": {"code": "{{lastOutput('dev1')}}"},
      "output": "finalPerfReview"
    },
    
    {
      "id": "final_polish",
      "action": "reviseCode",
      "agent": "dev1",
      "params": {
        "code": "{{lastOutput('dev1')}}",
        "feedback": "{{outputs.finalSeniorReview}}"
      },
      "output": "finalCode"
    },
    
    {
      "id": "save_final_code",
      "action": "saveToFile",
      "params": {
        "content": "{{outputs.finalCode}}",
        "filename": "cellular_automata_final.py"
      }
    },
    {
      "id": "save_final_review",
      "action": "saveToFile", 
      "params": {
        "content": "{{outputs.finalSeniorReview}}",
        "filename": "final_review.md"
      }
    }
  ],
  
  "config": {
    "logLevel": "info",
    "saveIntermediateOutputs": true,
    "outputDirectory": "./cellular_automata_advanced_results2"
  }
}