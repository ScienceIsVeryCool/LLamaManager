{
  "metadata": {
    "name": "Competitive Cellular Automata Development with Iterative Refinement",
    "version": "4.0",
    "description": "Two junior developers compete through multiple rounds of refinement, overwriting their solutions as they improve based on feedback and testing"
  },
  
  "agents": {
    "optimistic": {
      "model": "gemma3:4b",
      "temperature": 0.8,
      "personality": "You are an enthusiastic junior developer who loves experimenting with creative visual effects. You tend to favor colorful, dynamic solutions and enjoy using cutting-edge libraries. You write Python code with lots of comments explaining your excitement about each feature. You believe in 'go big or go home' and love adding extra visual flair.",
      "contextType": "rolling"
    },
    "pragmatic": {
      "model": "gemma3:4b",
      "temperature": 0.6,
      "personality": "You are a methodical junior developer who values clean, efficient code. You prefer well-tested libraries and established patterns. You write Python code with a focus on performance and maintainability. You believe in 'keep it simple, stupid' and optimize for clarity and speed. You're skeptical of unnecessary features.",
      "contextType": "rolling"
    },
    "reviewer": {
      "model": "gemma3:4b",
      "temperature": 0.3,
      "personality": "You are a Senior Engineer evaluating competing implementations. You value both creativity and practicality. Be direct about strengths and weaknesses. Consider performance, visual appeal, code quality, and how well the solution meets requirements. Provide balanced feedback to both developers.",
      "contextType": "append"
    },
    "tester": {
      "model": "gemma3:4b",
      "temperature": 0.4,
      "personality": "You are a QA Engineer who tests code execution. You analyze runtime output, error messages, and performance characteristics. You identify bugs, crashes, performance issues, and provide practical feedback on what actually works vs what was intended. You're detail-oriented about execution problems.",
      "contextType": "clean"
    },
    "strategist": {
      "model": "gemma3:4b",
      "temperature": 0.5,
      "personality": "You are a technical strategist who thinks about the bigger picture. You analyze competition dynamics, identify key improvement opportunities, and provide high-level guidance without getting bogged down in implementation details.",
      "contextType": "clean"
    }
  },
  
  "actions": {
    "initialDesign": {
      "prompt": "Design a Python cellular automata simulation with these requirements:\n\n1. Must use matplotlib or similar for visualization\n2. Should leverage numpy or other libraries for performance\n3. Must run indefinitely (no stop condition except extinction)\n4. Should show interesting emergent behavior\n5. Include real-time visualization that updates smoothly\n6. Initial state should lead to interesting evolution\n\nProvide complete, runnable code. Focus on {{1}}."
    },
    "compareImplementations": {
      "prompt": "Compare these two cellular automata implementations:\n\n=== OPTIMISTIC DEVELOPER'S CODE ===\n{{1}}\n\n=== PRAGMATIC DEVELOPER'S CODE ===\n{{2}}\n\nEvaluate based on:\n1. Visual appeal and user experience\n2. Performance and efficiency\n3. Code quality and maintainability\n4. Meeting the requirement of running indefinitely\n5. Emergent behavior complexity\n\nPick a winner and explain why. Give specific feedback for each developer on what they did well and what needs improvement."
    },
    "strategicAssessment": {
      "prompt": "Based on this comparison of the two implementations:\n\n{{1}}\n\nWhat are the 3 most critical areas each developer should focus on for maximum competitive advantage? Consider both technical excellence and meeting user requirements. Think strategically about what changes would have the biggest impact."
    },
    "improveBasedOnFeedback": {
      "prompt": "Your previous implementation received this feedback:\n\n{{1}}\n\nImprove your cellular automata simulation addressing the specific points raised. Maintain your coding style but incorporate the suggestions. Remember:\n- Must run indefinitely (only stop on extinction)\n- Focus on smooth visualization\n- Show interesting emergent patterns\n\nProvide the complete improved implementation."
    },
    "analyzeExecution": {
      "prompt": "Analyze this program execution output:\n\n{{1}}\n\nFocus on:\n1. Did the program run successfully or crash?\n2. What errors or warnings occurred?\n3. How long did it run before stopping?\n4. Any performance issues or bottlenecks?\n5. Does the output suggest the simulation is working as intended?\n6. What runtime issues need to be addressed?\n\nProvide specific technical feedback on the execution quality."
    },
    "combineExecutionFeedback": {
      "prompt": "Combine execution test results with code review:\n\n=== CODE REVIEW ===\n{{1}}\n\n=== OPTIMISTIC EXECUTION RESULTS ===\n{{2}}\n\n=== PRAGMATIC EXECUTION RESULTS ===\n{{3}}\n\nProvide comprehensive feedback that considers both code quality AND actual runtime performance. Which implementation actually works better in practice? What are the real-world differences between the approaches?"
    },
    "reflectOnProgress": {
      "prompt": "Reflect on the feedback you've received so far:\n\n{{1}}\n\nWhat aspects of your approach are working well? What fundamental changes might you need to make to your strategy? How can you better leverage your strengths while addressing weaknesses?"
    },
    "finalJudgment": {
      "prompt": "This is the final comparison. Evaluate the latest implementations:\n\n=== OPTIMISTIC DEVELOPER'S FINAL CODE ===\n{{1}}\n\n=== PRAGMATIC DEVELOPER'S FINAL CODE ===\n{{2}}\n\nProvide:\n1. Final winner and detailed reasoning\n2. What each developer did best throughout the iterations\n3. Key lessons learned from this competition\n4. Which approach would you recommend for production use and why"
    },
    "buildCompetitionReport": {
      "prompt": "Create a comprehensive competition report based on the final judgment:\n\n{{1}}\n\nFormat this as a proper markdown document that tells the complete story of this competitive development process, including the evolution of both approaches and the final outcome."
    }
  },
  
  "workflow": [
    {
      "action": "initialDesign",
      "agent": "optimistic",
      "inputs": ["maximum visual impact with colorful, dynamic effects"],
      "output": "optimistic_design.md"
    },
    {
      "action": "initialDesign",
      "agent": "pragmatic",
      "inputs": ["clean, efficient implementation with optimal performance"],
      "output": "pragmatic_design.md"
    },
    {
      "action": "compareImplementations",
      "agent": "reviewer",
      "inputs": ["optimistic_design.md", "pragmatic_design.md"],
      "output": "comparison.md"
    },
    {
      "action": "strategicAssessment",
      "agent": "strategist",
      "inputs": ["comparison.md"],
      "output": "strategic_guidance.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "optimistic",
      "inputs": ["strategic_guidance.md"],
      "output": "optimistic_design.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "pragmatic",
      "inputs": ["strategic_guidance.md"],
      "output": "pragmatic_design.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "optimistic",
      "inputs": ["Extract just the python code from the implementation"],
      "output": "optimistic_code.py",
      "format": "python"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "pragmatic",
      "inputs": ["Extract just the python code from the implementation"],
      "output": "pragmatic_code.py",
      "format": "python"
    },
    {
      "action": "run_python",
      "inputs": ["optimistic_code.py"],
      "output": "optimistic_execution.log"
    },
    {
      "action": "run_python",
      "inputs": ["pragmatic_code.py"],
      "output": "pragmatic_execution.log"
    },
    {
      "action": "analyzeExecution",
      "agent": "tester",
      "inputs": ["optimistic_execution.log"],
      "output": "optimistic_execution_analysis.md"
    },
    {
      "action": "analyzeExecution",
      "agent": "tester",
      "inputs": ["pragmatic_execution.log"],
      "output": "pragmatic_execution_analysis.md"
    },
    {
      "action": "combineExecutionFeedback",
      "agent": "reviewer",
      "inputs": [
        "comparison.md",
        "optimistic_execution_analysis.md",
        "pragmatic_execution_analysis.md"
      ],
      "output": "combined_feedback.md"
    },
    {
      "action": "reflectOnProgress",
      "agent": "optimistic",
      "inputs": ["combined_feedback.md"]
    },
    {
      "action": "reflectOnProgress",
      "agent": "pragmatic",
      "inputs": ["combined_feedback.md"]
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "optimistic",
      "inputs": ["combined_feedback.md"],
      "output": "optimistic_design.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "pragmatic",
      "inputs": ["combined_feedback.md"],
      "output": "pragmatic_design.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "optimistic",
      "inputs": ["Extract just the python code from the implementation"],
      "output": "optimistic_code.py",
      "format": "python"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "pragmatic",
      "inputs": ["Extract just the python code from the implementation"],
      "output": "pragmatic_code.py",
      "format": "python"
    },
    {
      "action": "run_python",
      "inputs": ["optimistic_code.py"],
      "output": "optimistic_execution.log"
    },
    {
      "action": "run_python",
      "inputs": ["pragmatic_code.py"],
      "output": "pragmatic_execution.log"
    },
    {
      "action": "analyzeExecution",
      "agent": "tester",
      "inputs": ["optimistic_execution.log"],
      "output": "optimistic_execution_analysis.md"
    },
    {
      "action": "analyzeExecution",
      "agent": "tester",
      "inputs": ["pragmatic_execution.log"],
      "output": "pragmatic_execution_analysis.md"
    },
    {
      "action": "combineExecutionFeedback",
      "agent": "reviewer",
      "inputs": [
        "comparison.md",
        "optimistic_execution_analysis.md",
        "pragmatic_execution_analysis.md"
      ],
      "output": "combined_feedback.md"
    },
    {
      "action": "strategicAssessment",
      "agent": "strategist",
      "inputs": ["combined_feedback.md"],
      "output": "final_strategic_guidance.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "optimistic",
      "inputs": ["combined_feedback.md"],
      "output": "optimistic_design.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "pragmatic",
      "inputs": ["combined_feedback.md"],
      "output": "pragmatic_design.md"
    },
    {
      "action": "finalJudgment",
      "agent": "reviewer",
      "inputs": ["optimistic_design.md", "pragmatic_design.md"],
      "output": "final_judgment.md"
    },
    {
      "action": "buildCompetitionReport",
      "agent": "reviewer",
      "inputs": ["final_judgment.md"],
      "output": "competition_report.md"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "optimistic",
      "inputs": ["final_judgment.md"],
      "output": "cellular_automata_optimistic_final.py",
      "format": "python"
    },
    {
      "action": "improveBasedOnFeedback",
      "agent": "pragmatic",
      "inputs": ["final_judgment.md"],
      "output": "cellular_automata_pragmatic_final.py",
      "format": "python"
    },
    {
      "action": "run_python",
      "inputs": ["cellular_automata_optimistic_final.py"],
      "output": "final_optimistic_execution.log"
    },
    {
      "action": "run_python",
      "inputs": ["cellular_automata_pragmatic_final.py"],
      "output": "final_pragmatic_execution.log"
    },
    {
      "action": "analyzeExecution",
      "agent": "tester",
      "inputs": ["final_optimistic_execution.log"],
      "output": "final_optimistic_analysis.md"
    },
    {
      "action": "analyzeExecution",
      "agent": "tester",
      "inputs": ["final_pragmatic_execution.log"],
      "output": "final_pragmatic_analysis.md"
    },
    {
      "action": "combineExecutionFeedback",
      "agent": "reviewer",
      "inputs": [
        "final_judgment.md",
        "final_optimistic_analysis.md",
        "final_pragmatic_analysis.md"
      ],
      "output": "final_execution_comparison.md"
    }
  ],
  
  "config": {
    "logLevel": "info",
    "outputDirectory": "./cellular_competition_refined",
    "queryTimeout": 3000,
    "maxContextTokens": 8000
  }
}